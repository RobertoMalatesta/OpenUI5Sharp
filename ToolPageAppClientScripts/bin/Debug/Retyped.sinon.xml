<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Retyped.sinon</name>
    </assembly>
    <members>
        <member name="M:Retyped.sinon.Sinon.SinonSpy.reset">
            @deprecated Use resetHistory() instead
        </member>
        <member name="M:Retyped.sinon.Sinon.SinonStatic.createStubInstance(System.Object)">
            <summary>
            Creates a new object with the given functions as the prototype and stubs all implemented functions.
            @remarks The given constructor function is not invoked. See also the stub API.
            </summary>
            <param name = "constructor">Object or class to stub.</param>
            <returns>A stubbed version of the constructor.</returns>
        </member>
        <member name="M:Retyped.sinon.Sinon.SinonStatic.createStubInstance``1(Retyped.sinon.Sinon.StubbableType{``0})">
            <summary>
            Creates a new object with the given functions as the prototype and stubs all implemented functions.
            @template TType Type being stubbed.
            @remarks The given constructor function is not invoked. See also the stub API.
            </summary>
            <param name = "constructor">Object or class to stub.</param>
            <returns>A stubbed version of the constructor.</returns>
        </member>
        <member name="M:Retyped.sinon.Sinon.SinonFakeTimers.setSystemTime(System.Double)">
            <summary>
            Simulate the user changing the system clock while your program is running. It changes the 'now' timestamp
            without affecting timers, intervals or immediates.
            </summary>
            <param name = "now">The new 'now' in unix milliseconds</param>
        </member>
        <member name="M:Retyped.sinon.Sinon.SinonFakeTimers.setSystemTime(Retyped.es5.Date)">
            <summary>
            Simulate the user changing the system clock while your program is running. It changes the 'now' timestamp
            without affecting timers, intervals or immediates.
            </summary>
        </member>
        <member name="M:Retyped.sinon.Sinon.SinonArrayMatcher.deepEquals(System.Object[])">
            <summary>
            Requires an Array to be deep equal another one.
            </summary>
        </member>
        <member name="M:Retyped.sinon.Sinon.SinonArrayMatcher.startsWith(System.Object[])">
            <summary>
            Requires an Array to start with the same values as another one.
            </summary>
        </member>
        <member name="M:Retyped.sinon.Sinon.SinonArrayMatcher.endsWith(System.Object[])">
            <summary>
            Requires an Array to end with the same values as another one.
            </summary>
        </member>
        <member name="M:Retyped.sinon.Sinon.SinonArrayMatcher.contains(System.Object[])">
            <summary>
            Requires an Array to contain each one of the values the given array has.
            </summary>
        </member>
        <member name="M:Retyped.sinon.Sinon.SinonMapMatcher.deepEquals(Retyped.sinon.Sinon.SimplifiedMap)">
            <summary>
            Requires a Map to be deep equal another one.
            </summary>
        </member>
        <member name="M:Retyped.sinon.Sinon.SinonMapMatcher.contains(Retyped.sinon.Sinon.SimplifiedMap)">
            <summary>
            Requires a Map to contain each one of the items the given map has.
            </summary>
        </member>
        <member name="M:Retyped.sinon.Sinon.SinonSetMatcher.deepEquals(Retyped.sinon.Sinon.SimplifiedSet)">
            <summary>
            Requires a Set to be deep equal another one.
            </summary>
        </member>
        <member name="M:Retyped.sinon.Sinon.SinonSetMatcher.contains(Retyped.sinon.Sinon.SimplifiedSet)">
            <summary>
            Requires a Set to contain each one of the items the given set has.
            </summary>
        </member>
        <member name="P:Retyped.sinon.Sinon.SinonMatch.map">
            <summary>
            Requires the value to be a Map.
            </summary>
        </member>
        <member name="P:Retyped.sinon.Sinon.SinonMatch.set">
            <summary>
            Requires the value to be a Set.
            </summary>
        </member>
        <member name="P:Retyped.sinon.Sinon.SinonMatch.array">
            <summary>
            Requires the value to be an Array.
            </summary>
        </member>
        <member name="T:Retyped.sinon.Sinon.StubbableType`1">
            <summary>
            Stubbed type of an object with members replaced by stubs.
            @template TType Type being stubbed.
            </summary>
        </member>
        <member name="T:Retyped.sinon.Sinon.SinonStubbedInstance`1">
            <summary>
            An instance of a stubbed object type with members replaced by stubs.
            @template TType Object type being stubbed.
            </summary>
        </member>
    </members>
</doc>
